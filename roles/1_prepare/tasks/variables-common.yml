---
- name: Auto-detect sp_vm if not defined (sp_vm)
  set_fact:
    cacheable: true
    sp_vm: "{{ ansible_product_name == 'KVM' }}"
    sp_vm_guessed: true
  when:
    - sp_vm is not defined

- name: Define server role
  block:
    - name: Populate from sp_node_roles (sp_roles_list)
      set_fact:
        cacheable: true
        sp_roles_list: "{{ sp_node_roles.split(',') }}"
    - name: Initial definition (sp_roles)
      set_fact:
        sp_roles: {}
    - name: Decide on server (sp_roles)
      set_fact:
        cacheable: true
        sp_roles: "{{ sp_roles | combine({'server': true}) }}"
        sp_server_instances: "{{ item }}"
      with_items: "{{ sp_roles_list }}"
      when: 
        - "'server' in item.split(':')"

- name: Define count of server instances
  block:
    - name: 1 server instance (sp_server_instances)
      set_fact:
        cacheable: true
        sp_server_instances: 1
      when:
        - sp_server_instances is defined and
          sp_server_instances == 'server'
    - name: More than 1 server instances (sp_server_instances)
      set_fact:
        cacheable: true
        sp_server_instances: "{{ sp_server_instances.split(':')[1] }}"
      when:
        - sp_server_instances is defined and
          sp_server_instances > '0'
    - name: No server instances (sp_server_instances)
      set_fact:
        cacheable: true
        sp_server_instances: "0"
      when:
        - sp_server_instances is not defined

- name: Decide on other roles (sp_roles)
  set_fact:
    cacheable: true
    sp_roles: "{{ sp_roles | combine({item: true}) }}"
  when: "item in sp_roles_list"
  with_items:
    - client
    - mgmt
    - iscsi
    - bridge

- name: Populate false values (sp_roles)
  set_fact:
    cacheable: true
    sp_roles: "{{ sp_roles | combine({item: false}) }}"
  when: 
    - item not in sp_roles.keys()
  with_items:
    - server
    - client
    - mgmt
    - iscsi
    - bridge

- name: Initial definition of the sp_install_services variable
  set_fact:
    cacheable: true
    sp_install_services: "@block cli"

- name: Add services (sp_install_services)
  set_fact:
    cacheable: true
    sp_install_services: "{{ sp_install_services }} {{ item }}"
  when:
    - sp_roles[item]
  with_items:
    - server
    - iscsi
    - mgmt
    - bridge

- name: Pick server node for initial disk
  run_once: true
  set_fact:
    cacheable: true
    sp_init_node: "{{ ansible_play_hosts|map('extract', hostvars)|list|json_query('[?sp_roles.server].ansible_fqdn|[0]') }}"
  when:
    - sp_new_cluster

- name: Initial definition (sp_cg_conf_extra)
  set_fact:
    cacheable: true
    sp_cg_conf_extra: "{{ sp_cg_conf_extra|upper }}"
  when:
    - sp_cg_conf_extra is defined and
      sp_cg_conf_extra | length > 0

- name: Decide if hyperconverged node (sp_cg_conf_extra)
  set_fact:
    cacheable: true
    sp_cg_conf_extra: "CONVERGED=1 {{ sp_cg_conf_extra }}"
  when:
    - sp_roles.server and 
      sp_roles.client and
      'CONVERGED'
      not in sp_cg_conf_extra

- name: "sp_drive_list: initial definition"
  set_fact:
    sp_drive_list: []
  when:
    - sp_roles.server

- name: Get node drive sizes
  shell: |
    set -o pipefail
    lsblk -ndo TYPE,NAME,SIZE \
    | grep ^disk \
    | awk '{print $2,$3}'
  changed_when: false
  register: sp_node_drive_size
  when:
    - sp_roles.server
    - sp_drive_size is defined

- name: "sp_drive_list: populate by name/model"
  set_fact:
    cacheable: true
    sp_drive_list: "{{ sp_drive_list + [ item.key ] }}"
  with_dict: "{{ ansible_devices }}"
  when:
    - sp_roles.server and
      item.key not in sp_drive_list and
      ((sp_drives is defined and
      item.key in sp_drives.split(',')) or
      (sp_drive_model is defined and
      item.value.model in sp_drive_model.split(',')))

- name: "sp_drive_list: populate by size"
  set_fact:
    cacheable: true
    sp_drive_list: "{{ sp_drive_list + [ item.split()[0] ] }}"
  with_items: "{{ sp_node_drive_size.stdout_lines }}"
  when:
    - sp_roles.server and
      sp_drive_size is defined and
      item.split()[0] not in sp_drive_list and
      item.split()[1] in sp_drive_size.split(',')

- name: "check for nvme drives"
  set_fact:
    cacheable: true
    sp_roles: "{{ sp_roles | combine({'nvme': true}) }}"
  when: 
    - sp_roles.server and 
      (sp_drive_list 
      | select('match', '^nvme')
      | list
      | count > 0)

- name: "no nvme drives found"
  set_fact:
    cacheable: true
    sp_roles: "{{ sp_roles | combine({'nvme': false}) }}"
  when: sp_roles.nvme is not defined

- name: "sp_systemd_services: initial definition"
  set_fact:
    cacheable: true
    sp_systemd_services: "{{ sp_services.common }} + {{ sp_services.helper }}"

- name: "sp_systemd_services: add services"
  set_fact:
    cacheable: true
    sp_systemd_services: "{{ sp_systemd_services }} + {{ sp_services[item] }}"
  when: "sp_roles[item]"
  with_items:
    - mgmt
    - nvme
    - server
    - iscsi
    - bridge
