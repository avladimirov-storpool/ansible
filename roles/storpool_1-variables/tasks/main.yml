---
- name: Include local tasks 
  include_tasks: local.yml
  tags: ['variables'] # Include local tasks

- name: Validate sp_selinux variable (sp_selinux)
  fail:
    msg: "invalid 'sp_selinux' value: {{ sp_selinux }}"
  when: "sp_selinux not in ['disabled', 'permissive', 'enforcing']"
  tags: ['variables'] # Validate sp_selinux variable (sp_selinux)

- name: Auto-detect sp_vm if not defined (sp_vm)
  set_fact:
    cacheable: true
    sp_vm: "{{ ansible_product_name == 'KVM' }}"
    sp_vm_guessed: true
  when: sp_vm is not defined
  tags: ['variables'] # Auto-detect sp_vm if not defined (sp_vm)

- name: Validate boolean variables
  fail:
    msg: "{{ item|quote }} value is not boolean: {{ vars[item] }}"
  when: vars[item] not in [ true, false ]
  with_items: "{{ sp_bool_vars }}"
  tags: ['variables'] # Validate boolean variables

- name: Define server role
  block:
    - name: Populate from sp_node_roles (sp_roles_list)
      set_fact:
        cacheable: true
        sp_roles_list: "{{ sp_node_roles.split(',') }}"
    - name: Validate roles list (sp_node_roles)
      fail:
        msg: "{{ item|quote }} is not a valid role!"
      with_items: "{{ sp_roles_list }}"
      when: item not in sp_valid_roles
    - name: Initial definition (sp_roles)
      set_fact:
        sp_roles: {}
    - name: Decide on server (sp_roles)
      set_fact:
        cacheable: true
        sp_roles: "{{ sp_roles | combine({'server': true}) }}"
        sp_server_instances: "{{ item }}"
      with_items: "{{ sp_roles_list }}"
      when: "'server' in item.split(':')"
  tags: ['variables'] # Define server role

- name: Define count of server instances 
  block:
    - name: 1 server instance (sp_server_instances)
      set_fact:
        cacheable: true
        sp_server_instances: 1
      when: 
        - sp_server_instances is defined and
          sp_server_instances == 'server'
    - name: More than 1 server instances (sp_server_instances) 
      set_fact:
        cacheable: true
        sp_server_instances: "{{ sp_server_instances.split(':')[1] }}"
      when: 
        - sp_server_instances is defined and
          sp_server_instances > '0' 
    - name: No server instances (sp_server_instances) 
      set_fact:
        cacheable: true
        sp_server_instances: '0'
      when:
        - sp_server_instances is not defined
  tags: ['variables'] # Define count of server instances

- name: Decide on other roles (sp_roles)
  set_fact:
    cacheable: true
    sp_roles: "{{ sp_roles | combine({item: true}) }}"
  when: "item in sp_roles_list"
  with_items:
    - client
    - mgmt
    - iscsi
    - bridge
  tags: ['variables'] # Decide on other roles (sp_roles)

- name: Populate false values (sp_roles)
  set_fact:
    cacheable: true
    sp_roles: "{{ sp_roles | combine({item: false}) }}"
  when: "item not in sp_roles.keys()"
  with_items:
    - server
    - client
    - mgmt
    - iscsi
    - bridge
  tags: ['variables'] # Populate false values (sp_roles)

- name: "sp_install_services: initial definition"
  set_fact:
    cacheable: true
    sp_install_services: '@block cli'
  tags: ['variables'] #

- name: Add services (sp_install_services)
  set_fact:
    cacheable: true
    sp_install_services: "{{ sp_install_services }} {{ item }}"
  when: "sp_roles[item]"
  with_items:
    - server
    - iscsi
    - mgmt
    - bridge
  tags: ['variables'] # Add services (sp_install_services)

- name: Pick server node for initial disk
  run_once: true
  set_fact:
    cacheable: true
    sp_init_node: "{{ ansible_play_hosts|map('extract', hostvars)|list|json_query('[?sp_roles.server].ansible_fqdn|[0]') }}"
  when: sp_new_cluster
  tags: ['variables'] # Pick server node for initial disk

- name: Check for server nodes if new cluster
  run_once: true
  fail:
    msg: "New cluster deployment, but no server nodes!"
  when: 
    - sp_new_cluster and 
      sp_init_node|length == 0
  tags: ['variables'] # Check for server nodes if new cluster

- name: Initial definition (sp_cg_conf_extra)
  set_fact:
    cacheable: true
    sp_cg_conf_extra: "{{ sp_cg_conf_extra|upper }}"
  when: 
    - sp_cg_conf_extra is defined and 
      sp_cg_conf_extra|length > 0
  tags: ['variables'] # Initial definition (sp_cg_conf_extra)

- name: Decide if hyperconverged node (sp_cg_conf_extra)
  set_fact:
    cacheable: true
    sp_cg_conf_extra: "CONVERGED=1 {{ sp_cg_conf_extra }}"
  when: "sp_roles.server and sp_roles.client and 'CONVERGED' not in sp_cg_conf_extra"
  tags: ['variables'] # Decide if hyperconverged node (sp_cg_conf_extra)

- name: "sp_drive_list: initial definition"
  set_fact:
    sp_drive_list: []
  when: sp_roles.server
  tags: ['variables'] #

- name: "get node drive sizes"
  shell: >
    set -o pipefail && \
      lsblk -ndo TYPE,NAME,SIZE | grep ^disk | awk '{print $2,$3}'
  changed_when: false
  register: sp_node_drive_size
  when: sp_roles.server and sp_drive_size is defined
  tags: ['variables'] #

- name: "sp_drive_list: populate by name/model"
  set_fact:
    cacheable: true
    sp_drive_list: "{{ sp_drive_list + [ item.key ] }}"
  with_dict: "{{ ansible_devices }}"
  when: >
    sp_roles.server and item.key not in sp_drive_list and
    ((sp_drives is defined and item.key in sp_drives.split(',')) or
    (sp_drive_model is defined and item.value.model in sp_drive_model.split(',')))
  tags: ['variables'] #

- name: "sp_drive_list: populate by size"
  set_fact:
    cacheable: true
    sp_drive_list: "{{ sp_drive_list + [ item.split()[0] ] }}"
  with_items: "{{ sp_node_drive_size.stdout_lines }}"
  when: >
    sp_roles.server and sp_drive_size is defined and
    item.split()[0] not in sp_drive_list and item.split()[1] in sp_drive_size.split(',')
  tags: ['variables'] #

- name: "sp_drive_list: validate"
  fail:
    msg: "{{ item }} contains partitions! Please remove them or set sp_drive_erase to True"
  with_items: "{{ sp_drive_list }}"
  when: >
    sp_roles.server and ansible_devices[item].partitions|length > 0 and not sp_drive_erase
  tags: ['variables'] #

- name: "check for nvme drives"
  set_fact:
    cacheable: true
    sp_roles: "{{ sp_roles | combine({'nvme': true}) }}"
  when: sp_roles.server and (sp_drive_list | select('match', '^nvme') | list | count > 0)
  tags: ['variables'] #

- name: "no nvme drives found"
  set_fact:
    cacheable: true
    sp_roles: "{{ sp_roles | combine({'nvme': false}) }}"
  when: sp_roles.nvme is not defined
  tags: ['variables'] #

- name: "check if we have drives for the servers"
  fail:
    msg: "Node declared as a server, but no drives found to initialize"
  when: "sp_roles.server and sp_drive_list|length == 0"
  tags: ['variables'] #

- name: "sp_systemd_services: initial definition"
  set_fact:
    cacheable: true
    sp_systemd_services: "{{ sp_services.common }} + {{ sp_services.helper }}"
  tags: ['variables'] #

- name: "sp_systemd_services: add services"
  set_fact:
    cacheable: true
    sp_systemd_services: "{{ sp_systemd_services }} + {{ sp_services[item] }}"
  when: "sp_roles[item]"
  with_items:
    - mgmt
    - nvme
    - server
    - iscsi
    - bridge
  tags: ['variables'] #

- name: "populate sp_summary_msg"
  set_fact:
    sp_summary_msg: # do not use tabs below - the output gets ugly
      - "OS update:        {{ sp_update_system }}"
      - "Net config:       {{ sp_configure_network }} ({{ '' if sp_overwrite_iface_conf and sp_configure_network else 'do not ' }}overwrite existing)"
      - "Network Manager:  {{ 'disable' if sp_disable_nm else 'leave as is' }}"
      - "Firewall:         {{ 'disable' if sp_disable_fw else 'adjust' }}"
      - "SELinux:          {{ sp_selinux }}"
      - "VM Node:          {{ sp_vm }} ({{ 'Guessed' if sp_vm_guessed is defined else 'Defined' }}, Product Name: {{ ansible_product_name }})"
      - "New Cluster:      {{ sp_new_cluster }}{{' (initial disk node)' if sp_new_cluster and sp_init_node == ansible_fqdn else ''}}"
      - "SP release:       {{ sp_release }}"
      - "Release Source:   {{ sp_release_file }}"
      - "storpool.conf:    {{ sp_config }}"
      - "node roles:       {{ sp_node_roles }}"
      - "install.sh:       {{ sp_install_services }}"
      - "Drives to init:   {{ sp_drive_list | sort | join(', ') if sp_roles.server else 'none' }}"
      - "Server Instances: {{ sp_server_instances }}"
      - "storpool_cg conf: {{ sp_cg_conf_extra|default('default')}}"
  when: sp_summary_wait

- name: "sp_summary_msg: display"
  debug: var=sp_summary_msg
  when: sp_summary_wait

- name: "sp_summary_msg: review"
  pause:
    prompt: "\nPlease Review\n\nPress Enter to begin deployment\nor Ctrl-C,A to abort"
  when: sp_summary_wait
