---
- name: Get sp_poli variable
  delegate_to: localhost
  run_once: true
  become: false
  command: hostname
  register: bastion_hostname
  changed_when: false
  tags: ['variables'] # 

- name: Set sp_poli variable
  delegate_to: localhost
  set_fact:
    cacheable: true
    sp_poli: "{{ bastion_hostname.stdout == 'poli' }}"
  tags: ['variables'] # 

- name: Validate sp_poli variable 
  fail:
    msg: "sp_release_file set to 'poli' but I am not running on poli!"
  when:
    - sp_release_file == 'poli' and
      not sp_poli
  tags: ['variables'] # 

- name: Get cluster directory status
  delegate_to: localhost
  run_once: true
  become: no
  stat:
    path: "{{ sp_custdir }}/{{ sp_cluster }}"
  register: sp_cluster_dir
  when: sp_poli
  tags: ['variables'] # 

- name: Cluster directory missing
  fail:
    msg: "{{ sp_custdir }}/{{ sp_cluster }} directory missing on poli"
  when: sp_poli and (not sp_cluster_dir.stat.exists or not sp_cluster_dir.stat.isdir)
  tags: ['variables'] # 

- name: Get file status (sp_release_file)
  delegate_to: localhost
  run_once: true
  become: no
  stat:
    path: "{{ sp_release_file }}"
  register: sp_release_file_exists
  when: sp_release_file not in [ 'web', 'poli' ]
  tags: ['variables'] # 

- name: Check if file is readable
  fail:
    msg: "Unable to read sp_release_file: {{ sp_release_file }}"
  when: 
    - sp_release_file not in [ 'web', 'poli' ] and 
      not sp_release_file_exists.stat.readable
  tags: ['variables'] # 

- name: Get storpool.conf file status on the bastion
  delegate_to: localhost
  run_once: true
  become: no
  stat:
    path: "{{ sp_config }}"
  register: sp_config_exists
  tags: ['variables'] # 

- name: Check if storpool.conf file is readable on the bastion
  fail:
    msg: "Unable to read sp_config: {{ sp_config }}"
  when: 
    - not sp_config_exists.stat.exists or
      not sp_config_exists.stat.readable
  tags: ['variables'] # 

